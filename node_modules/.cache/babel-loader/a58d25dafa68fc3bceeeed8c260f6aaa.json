{"ast":null,"code":"import _objectSpread from \"D:\\\\note-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\note-app\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport PageTemplate from './PageTemplate';\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\nconst initialTodos = new Array(500).fill(0).map((foo, index) => ({\n  id: index,\n  text: \"\\uC77C\\uC815 \".concat(index),\n  done: false\n}));\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      input: '',\n      // 인풋의 값\n      // 일정 데이터 초기값\n      todos: initialTodos // 일정 데이터 안에 들어가는 id 값\n\n    };\n    this.id = 1;\n\n    this.getId = () => {\n      return ++this.id; // 현재 값에서 1을 더한 값을 반환\n    };\n\n    this.handleChange = e => {\n      const value = e.target.value;\n      this.setState({\n        input: value\n      });\n    };\n\n    this.handleInsert = () => {\n      const _this$state = this.state,\n            todos = _this$state.todos,\n            input = _this$state.input; // 새 데이터 객체 생성\n\n      const newTodo = {\n        text: input,\n        done: false,\n        id: this.getId()\n      }; // 배열 안에 새 데이터를 집어넣습니다.\n\n      this.setState({\n        todos: [...todos, newTodo],\n        input: ''\n      });\n    };\n\n    this.handleToggle = id => {\n      // id 로 배열의 인덱스를 찾습니다.\n      const todos = this.state.todos;\n      const index = todos.findIndex(todo => todo.id === id); // 찾은 데이터의 done 값을 반전시킵니다.\n\n      const toggled = _objectSpread({}, todos[index], {\n        done: !todos[index].done\n      }); // slice 를 통하여 우리가 찾은 index 전 후의 데이터들을 복사합니다\n      // 그리고 그 사이에는 변경된 투두 객체를 넣어줍니다.\n\n\n      this.setState({\n        todos: [...todos.slice(0, index), toggled, ...todos.slice(index + 1, todos.length)]\n      });\n    };\n\n    this.handleRemove = id => {\n      const todos = this.state.todos;\n      const index = todos.findIndex(todo => todo.id === id); // slice 로 전 후 데이터들을 복사하고, 우리가 찾은 index 는 제외시킵니다.\n\n      this.setState({\n        todos: [...todos.slice(0, index), ...todos.slice(index + 1, todos.length)]\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          input = _this$state2.input,\n          todos = _this$state2.todos;\n    const handleChange = this.handleChange,\n          handleInsert = this.handleInsert,\n          handleToggle = this.handleToggle,\n          handleRemove = this.handleRemove;\n    return React.createElement(PageTemplate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(TodoInput, {\n      onChange: handleChange,\n      onInsert: handleInsert,\n      value: input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(TodoList, {\n      todos: todos,\n      onToggle: handleToggle,\n      onRemove: handleRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\note-app\\src\\components\\App.js"],"names":["React","Component","PageTemplate","TodoInput","TodoList","initialTodos","Array","fill","map","foo","index","id","text","done","App","state","input","todos","getId","handleChange","e","value","target","setState","handleInsert","newTodo","handleToggle","findIndex","todo","toggled","slice","length","handleRemove","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PageTemplate from './PageTemplate';\r\nimport TodoInput from './TodoInput';\r\nimport TodoList from './TodoList';\r\n\r\nconst initialTodos = new Array(500).fill(0).map(\r\n  (foo, index) => ({ id: index, text: `일정 ${index}`, done: false })\r\n);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    input: '', // 인풋의 값\r\n    // 일정 데이터 초기값\r\n    todos: initialTodos,\r\n  }\r\n\r\n  // 일정 데이터 안에 들어가는 id 값\r\n  id = 1\r\n  getId = () => {\r\n    return ++this.id; // 현재 값에서 1을 더한 값을 반환\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({\r\n      input: value\r\n    });\r\n  }\r\n\r\n  // 새 데이터 추가\r\n  handleInsert = () => {\r\n    const { todos, input } = this.state;\r\n\r\n    // 새 데이터 객체 생성\r\n    const newTodo = {\r\n      text: input,\r\n      done: false,\r\n      id: this.getId()\r\n    };\r\n    \r\n    // 배열 안에 새 데이터를 집어넣습니다.\r\n    this.setState({\r\n      todos: [...todos, newTodo],\r\n      input: ''\r\n    });\r\n  }\r\n\r\n  // 투두아이템 토글하기\r\n  handleToggle = (id) => {\r\n    // id 로 배열의 인덱스를 찾습니다.\r\n    const { todos } = this.state;\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    \r\n    // 찾은 데이터의 done 값을 반전시킵니다.\r\n    const toggled = {\r\n      ...todos[index],\r\n      done: !todos[index].done\r\n    };\r\n\r\n    // slice 를 통하여 우리가 찾은 index 전 후의 데이터들을 복사합니다\r\n    // 그리고 그 사이에는 변경된 투두 객체를 넣어줍니다.\r\n    this.setState({\r\n      todos: [\r\n        ...todos.slice(0, index),\r\n        toggled,\r\n        ...todos.slice(index + 1, todos.length)\r\n      ]\r\n    });\r\n  }\r\n\r\n  handleRemove = (id) => {\r\n    const { todos } = this.state;\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n\r\n    // slice 로 전 후 데이터들을 복사하고, 우리가 찾은 index 는 제외시킵니다.\r\n    this.setState({\r\n      todos: [\r\n        ...todos.slice(0, index),\r\n        ...todos.slice(index + 1, todos.length)\r\n      ]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { input, todos } = this.state;\r\n    const { \r\n      handleChange,\r\n      handleInsert,\r\n      handleToggle,\r\n      handleRemove\r\n    } = this;\r\n\r\n    return (\r\n      <PageTemplate>\r\n        <TodoInput onChange={handleChange} onInsert={handleInsert} value={input}/>\r\n        <TodoList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\r\n      </PageTemplate>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}