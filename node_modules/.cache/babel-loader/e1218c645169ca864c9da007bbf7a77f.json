{"ast":null,"code":"import _objectSpread from \"D:\\\\note-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\note-app\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport PageTemplate from './common/PageTemplate';\nimport TodoInput from './common/TodoInput';\nimport TodoList from './common/TodoList';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      input: '',\n      // 인풋의 값\n      // 일정 데이터 초기값\n      todos: [{\n        id: 0,\n        text: '리액트 공부하기',\n        done: true\n      }, {\n        id: 1,\n        text: '컴포넌트 스타일링 해보기',\n        done: false\n      }] // 일정 데이터 안에 들어가는 id 값\n\n    };\n    this.id = 1;\n\n    this.getId = () => {\n      return ++this.id; // 현재 값에서 1을 더한 값을 반환\n    };\n\n    this.handleChange = e => {\n      const value = e.target.value;\n      this.setState({\n        input: value\n      });\n    };\n\n    this.handleInsert = () => {\n      const _this$state = this.state,\n            todos = _this$state.todos,\n            input = _this$state.input; // 새 데이터 객체 생성\n\n      const newTodo = {\n        text: input,\n        done: false,\n        id: this.getId()\n      }; // 배열 안에 새 데이터를 집어넣습니다.\n\n      this.setState({\n        todos: [...todos, newTodo],\n        input: ''\n      });\n    };\n\n    this.handleToggle = id => {\n      // id 로 배열의 인덱스를 찾습니다.\n      const todos = this.state.todos;\n      const index = todos.findIndex(todo => todo.id === id); // 찾은 데이터의 done 값을 반전시킵니다.\n\n      const toggled = _objectSpread({}, todos[index], {\n        done: !todos[index].done\n      }); // slice 를 통하여 우리가 찾은 index 전 후의 데이터들을 복사합니다\n      // 그리고 그 사이에는 변경된 투두 객체를 넣어줍니다.\n\n\n      this.setState({\n        todos: [...todos.slice(0, index), toggled, ...todos.slice(index + 1, todos.length)]\n      });\n    };\n\n    this.handleRemove = id => {\n      const todos = this.state.todos;\n      const index = todos.findIndex(todo => todo.id === id); // slice 로 전 후 데이터들을 복사하고, 우리가 찾은 index 는 제외시킵니다.\n\n      this.setState({\n        todos: [...todos.slice(0, index), ...todos.slice(index + 1, todos.length)]\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          input = _this$state2.input,\n          todos = _this$state2.todos;\n    const handleChange = this.handleChange,\n          handleInsert = this.handleInsert,\n          handleToggle = this.handleToggle,\n          handleRemove = this.handleRemove;\n    return React.createElement(PageTemplate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(TodoInput, {\n      onChange: handleChange,\n      onInsert: handleInsert,\n      value: input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(TodoList, {\n      todos: todos,\n      onToggle: handleToggle,\n      onRemove: handleRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\note-app\\src\\components\\App.js"],"names":["React","Component","PageTemplate","TodoInput","TodoList","App","state","input","todos","id","text","done","getId","handleChange","e","value","target","setState","handleInsert","newTodo","handleToggle","index","findIndex","todo","toggled","slice","length","handleRemove","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PageTemplate from './common/PageTemplate';\r\nimport TodoInput from './common/TodoInput';\r\nimport TodoList from './common/TodoList';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    input: '', // 인풋의 값\r\n    // 일정 데이터 초기값\r\n    todos: [\r\n      { id:0, text: '리액트 공부하기', done: true },\r\n      { id:1, text: '컴포넌트 스타일링 해보기', done: false }\r\n    ]\r\n  }\r\n\r\n  // 일정 데이터 안에 들어가는 id 값\r\n  id = 1\r\n  getId = () => {\r\n    return ++this.id; // 현재 값에서 1을 더한 값을 반환\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({\r\n      input: value\r\n    });\r\n  }\r\n\r\n  // 새 데이터 추가\r\n  handleInsert = () => {\r\n    const { todos, input } = this.state;\r\n\r\n    // 새 데이터 객체 생성\r\n    const newTodo = {\r\n      text: input,\r\n      done: false,\r\n      id: this.getId()\r\n    };\r\n    \r\n    // 배열 안에 새 데이터를 집어넣습니다.\r\n    this.setState({\r\n      todos: [...todos, newTodo],\r\n      input: ''\r\n    });\r\n  }\r\n\r\n  // 투두아이템 토글하기\r\n  handleToggle = (id) => {\r\n    // id 로 배열의 인덱스를 찾습니다.\r\n    const { todos } = this.state;\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    \r\n    // 찾은 데이터의 done 값을 반전시킵니다.\r\n    const toggled = {\r\n      ...todos[index],\r\n      done: !todos[index].done\r\n    };\r\n\r\n    // slice 를 통하여 우리가 찾은 index 전 후의 데이터들을 복사합니다\r\n    // 그리고 그 사이에는 변경된 투두 객체를 넣어줍니다.\r\n    this.setState({\r\n      todos: [\r\n        ...todos.slice(0, index),\r\n        toggled,\r\n        ...todos.slice(index + 1, todos.length)\r\n      ]\r\n    });\r\n  }\r\n\r\n  handleRemove = (id) => {\r\n    const { todos } = this.state;\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n\r\n    // slice 로 전 후 데이터들을 복사하고, 우리가 찾은 index 는 제외시킵니다.\r\n    this.setState({\r\n      todos: [\r\n        ...todos.slice(0, index),\r\n        ...todos.slice(index + 1, todos.length)\r\n      ]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { input, todos } = this.state;\r\n    const { \r\n      handleChange,\r\n      handleInsert,\r\n      handleToggle,\r\n      handleRemove\r\n    } = this;\r\n\r\n    return (\r\n      <PageTemplate>\r\n        <TodoInput onChange={handleChange} onInsert={handleInsert} value={input}/>\r\n        <TodoList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\r\n      </PageTemplate>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}